unlist(segment(d[[1]],mixseg))
}
seg = lapply(docs, jieba_tokenizer)
freqFrame <- as.data.frame(table(unlist(seg)))
freqFrame <- freqFrame[freqFrame$Freq>5,]
freqFrame <- freqFrame[freqFrame$Freq<150,]
freqFrame$Var1 <- as.character(freqFrame$Var1)
freqFrame <- freqFrame[nchar(freqFrame$Var1)>1,]
freqFrame <- freqFrame[grepl("山",freqFrame$Var1),]
freqFrame$Var1
jieba_tokenizer=function(d){
unlist(segment(d[[1]],mixseg))
}
seg = lapply(docs, jieba_tokenizer)
freqFrame <- as.data.frame(table(unlist(seg)))
freqFrame <- freqFrame[freqFrame$Freq>5,]
#freqFrame <- freqFrame[freqFrame$Freq<150,]
freqFrame$Var1 <- as.character(freqFrame$Var1)
freqFrame <- freqFrame[nchar(freqFrame$Var1)>1,]
freqFrame <- freqFrame[grepl("山",freqFrame$Var1),]
freqFrame$Var1
p <- ggplot(subset(freqFrame, Freq>30 ), aes(x = reorder(Var1, -Freq), y= Freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
p
docs <- tm_map(docs, toSpace, "山上")
docs <- tm_map(docs, toSpace, "山莊")
docs <- tm_map(docs, toSpace, "山頭")
docs <- tm_map(docs, toSpace, "山林")
docs <- tm_map(docs, toSpace, "火山口")
docs <- tm_map(docs, toSpace, "高山")
docs <- tm_map(docs, toSpace, "山口")
docs <- tm_map(docs, toSpace, "山中")
docs <- tm_map(docs, toSpace, "山前")
docs <- tm_map(docs, toSpace, "山裡")
docs <- tm_map(docs, toSpace, "人山")
docs <- tm_map(docs, toSpace, "山頂")
docs <- tm_map(docs, toSpace, "巡山")
docs <- tm_map(docs, toSpace, "下山")
docs <- tm_map(docs, toSpace, "上山")
docs <- tm_map(docs, toSpace, "大山")
docs <- tm_map(docs, toSpace, "山友")
docs <- tm_map(docs, toSpace, "富士山")
docs <- tm_map(docs, toSpace, "山域")
docs <- tm_map(docs, toSpace, "嵐山")
docs <- tm_map(docs, toSpace, "爬山")
docs <- tm_map(docs, toSpace, "山屋")
docs <- tm_map(docs, toSpace, "登山")
docs <- tm_map(docs, toSpace, "山下")
docs <- tm_map(docs, toSpace, "山中湖")
docs <- tm_map(docs, toSpace, "郊山")
docs <- tm_map(docs, toSpace, "山徑")
docs <- tm_map(docs, toSpace, "入山")
docs <- tm_map(docs, toSpace, "山路")
docs <- tm_map(docs, toSpace, "登山隊")
docs <- tm_map(docs, toSpace, "山區")
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
mixseg = worker()
my.data <- read.csv("mountain.csv")
str(my.data)
my.data$mountain <- as.character(my.data$mountain)
new_user_word(mixseg,my.data$mountain)
jieba_tokenizer=function(d){
unlist(segment(d[[1]],mixseg))
}
seg = lapply(docs, jieba_tokenizer)
freqFrame <- as.data.frame(table(unlist(seg)))
freqFrame <- freqFrame[freqFrame$Freq>5,]
#freqFrame <- freqFrame[freqFrame$Freq<150,]
freqFrame$Var1 <- as.character(freqFrame$Var1)
freqFrame <- freqFrame[nchar(freqFrame$Var1)>1,]
freqFrame <- freqFrame[grepl("山",freqFrame$Var1),]
freqFrame$Var1
p <- ggplot(subset(freqFrame, Freq>30 ), aes(x = reorder(Var1, -Freq), y= Freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
p
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(7,0.1),min.freq=5,max.words=70,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
install.packages("leaflet")
library(leaflet)
map <- leaflet() %>%
addTiles() %>%  # 加上預設的地圖資料
addMarkers(lng=120.239, lat=22.992,  popup="訊息方塊的文字說明")
map  # 繪製地圖
library(leaflet)
map <- leaflet()
addTiles()   # 加上預設的地圖資料
library(leaflet)
map <- leaflet() %>%
addTiles()   # 加上預設的地圖資料
addMarkers(lng=120.239, lat=22.992,  popup="訊息方塊的文字說明")
library(leaflet)
map <- leaflet() %>%
addTiles() %>%  # 加上預設的地圖資料
addMarkers(lng=120.239, lat=22.992,  popup="訊息方塊的文字說明")
map  # 繪製地圖
library(leaflet)
map <- leaflet()
map <- addTiles(map)
map <- addMarkers(map, lng=120.239, lat=22.992, popup="訊息方塊的文字說明")
map
library(leaflet)
map <- leaflet()
map <- addTiles(map)
map <- fitBounds(120,21,122,26)
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,21,122,26)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25.5)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(121,22,122,25.5)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
mountain <- read.csv("mountain.csv")
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
View(mountain)
library(leaflet)
mountain <- read.csv("mountain.csv")
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
View(mountain)
library(leaflet)
mountain <- read.csv("mountain.csv")
point.df <- mountain
map <- leaflet(point.df) %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
mountain <- read.csv("mountain.csv")
point.df <- mountain
map <- leaflet(point.df) %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
View(point.df)
View(mountain)
View(point.df)
library(leaflet)
mountain <- read.csv("mountain.csv")
point.df <- mountain$X
map <- leaflet(point.df) %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
mountain <- read.csv("mountain.csv")
point.df <- mountain$X
str(mountain)
map <- leaflet(point.df) %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
mountain <- read.csv("mountain.csv")
point.df <- mountain$X
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
mountain <- read.csv("mountain.csv")
point.df <- mountain$X
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
mountain <- read.csv("mountain.csv")
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25.5)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
library(leaflet)
map <- leaflet() %>%
addTiles() %>%
fitBounds(120,22,122,25)
map
View(map)
#引入所需要的套件包
rm(list=ls(all.names = TRUE))
library(bitops)
library(httr)
library(RCurl)
library(XML)
library(tm)
library(NLP)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(RColorBrewer)
library(wordcloud)
library(forcats)
library(ggplot2)
##文字清洗
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
d.corpus <- Corpus( DirSource("./DATA") )
##文字清洗
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
View(d.corpus)
##文字清洗
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
View(d.corpus)
setwd("C:/Users/ilove/OneDrive/文件/GitHub/R-mumi/week_5")
##文字清洗
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
View(d.corpus)
##文字清洗
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
View(d.corpus)
View(d.corpus)
##文字清洗
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
View(d.corpus)
##文字清洗
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
View(d.corpus)
mixseg = worker()
my.data <- read.csv("data.csv") ##做了一份日本都道府縣的生詞表，但是好像沒有起甚麼作用...
str(my.data)
my.data$words <- as.character(my.data$words)
new_user_word(mixseg,my.data$words)
#一個爬蟲，上到日本關光局的旅遊景點表上把每個地點都爬下來當作新詞
library(rvest)
doc <- read_html("https://www.welcome2japan.tw/location/destinations/")
place <- doc %>% html_nodes("#box li a") %>% html_text()
new_user_word(mixseg,place)
#詞彙切割
jieba_tokenizer = function(d)
{
unlist( segment(d[[1]], mixseg) )
}
seg = lapply(d.corpus, jieba_tokenizer)
count_token = function(d)
{
as.data.frame(table(d))
}
tokens = lapply(seg, count_token)
View(seg)
n = length(seg)
TDM = tokens[[1]]
colNames <- names(seg)
colNames <- gsub(".txt", "", colNames)
for( id in c(2:n) )
{
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', colNames[1:id])
}
TDM[is.na(TDM)] <- 0
TDM$d <- as.character(TDM$d)
TDM <- TDM[nchar(TDM$d)>1,] #篩掉字數小於一的詞
library(knitr)
kable(head(TDM))
kable(tail(TDM))
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(7,0.1),min.freq=5,max.words=70,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
View(TDM)
wordcloud(TDM$/01,TDM$d,
wordcloud(TDM$`01`,TDM$d,
scale=c(7,0.1),min.freq=5,max.words=70,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(TDM$`01`,TDM$d,
scale=c(7,0.1),min.freq=200,max.words=70,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
tf <- apply(as.matrix(TDM[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(TDM[,2:(n+1)]), 1, idfCal)
doc.tfidf <- TDM
#Tf-Idf
tempY = matrix(rep(c(as.matrix(tf)), each = length(idf)), nrow = length(idf))
tempX = matrix(rep(c(as.matrix(idf)), each = length(tf)), ncol = length(tf), byrow = TRUE)
doc.tfidf[,2:(n+1)] <- (doc.tfidf[,2:(n+1)] / tempY) * tempX
stopLine = rowSums(doc.tfidf[,2:(n+1)])
delID = which(stopLine == 0)
kable(head(doc.tfidf[delID,1]))
kable(tail(doc.tfidf[delID,1]))
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:20],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
TDM$d = as.character(TDM$d)
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
kable(head(AllTop))
filenames = as.array(paste0("./DATA/",colnames(doc.tfidf)[2:(n+1)],".txt"))
sizeResult = apply(filenames, 1, file.size) / 1024
showSize = data.frame(colnames(doc.tfidf)[2:(n+1)], sizeResult)
names(showSize) = c("month", "size_KB")
showSize$month <- fct_inorder(showSize$month) #showSize$month <- as.numeric(showSize$month)
ggplot(showSize, aes(x = month, y = size_KB)) + geom_bar(stat="identity")
View(TopWords)
View(TopWords)
View(showResult)
View(TDM)
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:20],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
wordcloud(TDM$d,TDM$`01`,
scale=c(7,0.1),min.freq=5,max.words=70,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:20],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
wordcloud(TDM$d,TDM$`01`,
scale=c(7,0.1),max.freq=20,max.words=70,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:20],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
wordcloud(TDM$d,TDM$`01`,
scale=c(7,0.1),min.freq=20,max.words=50,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:20],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
TDM$`01` <- TDM$`01`<100
# freqFrame <- freqFrame[nchar(freqFrame$Var1)>1,]
wordcloud(TDM$d,TDM$`01`,
scale=c(7,0.1),min.freq=20,max.words=50,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
View(TDM)
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:20],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
TDM$`01` <- TDM$`01`<100
# freqFrame <- freqFrame[nchar(freqFrame$Var1)>1,]
wordcloud(TDM$d,TDM$`01`,
scale=c(7,0.1),min.freq=10,max.words=70,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:20],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
View(TopWords)
